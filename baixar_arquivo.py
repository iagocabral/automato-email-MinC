from imap_tools import MailBox, MailboxLoginError, AND # Importa classes e fun√ß√µes necess√°rias da biblioteca imap_tools
from dotenv import load_dotenv # Para carregar vari√°veis de ambiente de um arquivo .env
import os # Para interagir com o sistema operacional (caminhos de arquivo, diret√≥rios)
import datetime # N√£o usado no script atual, mas √∫til para manipula√ß√£o de datas

load_dotenv() # Carrega as vari√°veis do arquivo .env

# Define o caminho para a pasta onde os anexos ser√£o salvos.
# Pega do ambiente ou usa './anexos' como padr√£o.
PASTA_DESTINO = os.getenv("PASTA_DESTINO", "./anexos")

# Pega as credenciais de e-mail das vari√°veis de ambiente.
# ATEN√á√ÉO: Se sua conta possui Autentica√ß√£o de Dois Fatores (MFA/2FA) ativada,
# voc√™ pode precisar de uma "senha de aplicativo" em vez da sua senha normal.
EMAIL = os.getenv("EMAIL")
SENHA = os.getenv("SENHA")

# Servidor IMAP para Gmail
IMAP_SERVER = os.getenv("IMAP_SERVER", "imap.gmail.com")

try:
    # Tenta conectar √† caixa de e-mail IMAP usando as credenciais e o servidor especificado.
    print(f"üîÑ Tentando conectar ao servidor IMAP: {IMAP_SERVER} com o e-mail: {EMAIL}...")
    with MailBox(IMAP_SERVER).login(EMAIL, SENHA) as mailbox:
        # Opcional: listar pastas para verificar conex√£o (pode ser removido em produ√ß√£o).
        folders = mailbox.folder.list()
        print(f"‚úÖ Conex√£o IMAP com {IMAP_SERVER} foi bem-sucedida para {EMAIL}!")

        # Buscar emails n√£o lidos (seen=False) que tenham anexos.
        # reverse=False busca do mais antigo para o mais novo, garantindo que o √∫ltimo do dia sobrescreva.
        # limit=10 busca nos √∫ltimos 10 e-mails n√£o lidos.
        print("üîé Buscando e-mails n√£o lidos com anexos do remetente 'SERPRO' (do mais antigo para o mais novo)...")
        for msg in mailbox.fetch(AND(all=True), reverse=False, limit=10):
            # Condi√ß√£o de filtro: o e-mail deve ser do remetente "SERPRO" E deve ter anexos.
            # O conte√∫do da mensagem (assunto ou texto) n√£o √© mais considerado.
            if (msg.from_ == "naoresponda@serpro.gov.br" and msg.attachments):
                
                print(f"üìß E-mail encontrado de: {msg.from_} com assunto: {msg.subject}")
                # Itera sobre cada anexo do e-mail
                for anexo in msg.attachments:
                    # Constr√≥i o caminho completo para salvar o anexo, mantendo o nome original.
                    # O modo "wb" (write binary) sobrescrever√° o arquivo se ele j√° existir,
                    # o que √© desejado para manter os dados sempre atualizados com a √∫ltima vers√£o do dia.
                    caminho = os.path.join(PASTA_DESTINO, anexo.filename)
                    # Cria o diret√≥rio de destino se ele n√£o existir
                    os.makedirs(PASTA_DESTINO, exist_ok=True)
                    
                    try:
                        with open(caminho, "wb") as f:
                            f.write(anexo.payload)
                        print(f"üìé Anexo '{anexo.filename}' salvo/sobrescrito em: {caminho}")
                    except IOError as io_err:
                        print(f"‚ùå Erro ao salvar o anexo '{anexo.filename}': {io_err}")
                
            else:
                # Mensagem para e-mails que n√£o correspondem aos crit√©rios de filtro (n√£o s√£o do SERPRO ou n√£o t√™m anexos).
                print(f"‚è≠Ô∏è E-mail '{msg.subject}' (de: {msg.from_}) n√£o corresponde aos crit√©rios ou n√£o possui anexos.")

except MailboxLoginError as e:
    # Captura erros de login. Fornece dicas para solu√ß√£o de problemas.
    print(f"‚ùå Falha de login ao conectar a {IMAP_SERVER}: {e}")
    print("Por favor, verifique:")
    print("1. Se o e-mail e a senha nas vari√°veis de ambiente (.env) est√£o corretos.")
    print("2. Se sua conta possui Autentica√ß√£o de Dois Fatores (MFA/2FA) ativada e, se sim, se voc√™ precisa de uma 'senha de aplicativo' (App Password).")
    print("3. Se o acesso IMAP est√° habilitado para sua conta nas configura√ß√µes do provedor de e-mail.")
except Exception as e:
    # Captura outros erros inesperados durante o processo.
    print(f"‚ùå Erro inesperado: {e}")
    print("Certifique-se de que o servidor IMAP est√° correto e que n√£o h√° problemas de rede ou permiss√µes de arquivo.")
